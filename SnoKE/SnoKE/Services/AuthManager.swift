//
//  AuthManager.swift
//  SnoKE
//
//  Created by Ilya Buldin on 21.10.2021.
//

import Foundation
import FirebaseAuth
import FirebaseFirestore

enum FirestoreCollection: String {
    case users
    case achievements
}

enum UserInfo: String {
    case id
    case email
    case cigarettesPerDay
    case cigarettesInPack
    case packPrice
    case finishSmokingDate
}

struct AppUser {
    let id: String
    let email: String
    let numberPerDay: String
    let numberInPack: String
    let packPrice: String
    let finishSmokingDate: String
    
    init(data: [String:Any]) {
        self.id = data["id"] as? String ?? ""
        self.email = data["email"] as? String ?? ""
        self.numberPerDay = data["numberPerDay"] as? String ?? ""
        self.numberInPack = data["numberInPack"] as? String ?? ""
        self.packPrice = data["packPrice"] as? String ?? ""
        self.finishSmokingDate = data["finishSmokingDate"] as? String ?? ""
    }
    
    
    func setUserDefaultFields() {
        
        UserDefaults.standard.set(email, forKey: "com.SnoKEapp.SnoKE.email.\(id)")
        UserDefaults.standard.set(numberPerDay, forKey: "com.SnoKEapp.SnoKE.numberPerDay.\(id)")
        UserDefaults.standard.set(numberInPack, forKey: "com.SnoKEapp.SnoKE.numberInPack.\(id)")
        UserDefaults.standard.set(packPrice, forKey: "com.SnoKEapp.SnoKE.packPrice.\(id)")
        
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "dd-MM-yyyy"
        dateFormatter.locale = Locale(identifier: "ru_RU")
        let date = dateFormatter.date(from: finishSmokingDate)!
        print(date)
        print(Date())
        UserDefaults.standard.setValue(date, forKey: "com.SnoKEapp.SnoKE.finishSmokingDate.\(id)")
        
    }
}

final class AuthManager {
    
    static let shared = AuthManager()
    
    private let database = Firestore.firestore()
    
    var currentUserID: String = ""
    
    private init() {
        
    }
    
    func signUpUser(_ vc: AuthViewControllerProtocol, email: String, password: String, completion: @escaping () -> Void) {
        Auth.auth().createUser(withEmail: email, password: password) { authResult, error in
            if let error = error as NSError? {
                switch AuthErrorCode(rawValue: error.code) {
                case .operationNotAllowed:
                    print("üê£ [DEBUG] AuthErrorCode: .operationNotAllowed")
                    vc.showSignUpErrorAlert(with: "–£ –Ω–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ, —Ç–æ–ª—å–∫–æ –Ω–µ –æ–±–∏–∂–∞–π—Ç–µ—Å—å")
                    
                    break
                    // Error: The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.
                case .emailAlreadyInUse:
                    print("üê£ [DEBUG] AuthErrorCode: .emailAlreadyInUse")
                    vc.showSignUpErrorAlert(with: "–ü—Ç–∏—á–∫–∞ –Ω–∞—à–µ–ø—Ç–∞–ª–∞, —á—Ç–æ –∫—Ç–æ-—Ç–æ —Å —Ç–∞–∫–æ–π –ø–æ—á—Ç–æ–π —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                    break
                    // Error: The email address is already in use by another account.
                case .invalidEmail:
                    print("üê£ [DEBUG] AuthErrorCode: .invalidEmail")
                    vc.showSignUpErrorAlert(with: "–ü–æ—á—Ç–∞ —á—Ç–æ –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏...\n –ö–∞–∫ –±—ã –≤–∞–º —Å–∫–∞–∑–∞—Ç—å...\n –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–µ —Å–Ω–æ–≤–∞ - —Ñ–æ—Ä–º–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π")
                    break
                    // Error: The email address is badly formatted.
                case .weakPassword:
                    print("üê£ [DEBUG] AuthErrorCode: .weakPassword")
                    vc.showSignUpErrorAlert(with: "–ü–∞—Ä–æ–ª—å —Å–ª–∞–±–æ–≤–∞—Ç, –¥—Ä—É–∂–∏—â–µ!\n –û–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤, –¥–µ—Ä–∑–∞–π!")
                    break
                    // Error: The password must be 6 characters long or more.
                default:
                    print("Error: \(error.localizedDescription)")
                }
            } else {
                print("‚úÖüê£‚úÖ User signs up successfully")
                
                guard let result = authResult else {
                    return
                    // TODO: make error completion
                }
                guard let id = Auth.auth().currentUser?.uid else {
                    return
                }
                self.currentUserID = id
                self.database
                    .collection(FirestoreCollection.users.rawValue)
                    .document(result.user.uid)
                    .setData([UserInfo.email.rawValue : email,
                              UserInfo.id.rawValue : id])
                completion()
                
            }
        }
    }
    
    func fillAdditionalUserInfo(to user: User, cigarettesPerDay: String, cigarettesInPack: String, packPrice: String) {
        self.database
            .collection(FirestoreCollection.users.rawValue)
            .document(user.uid)
            .updateData([UserInfo.cigarettesPerDay.rawValue : cigarettesPerDay,
                         UserInfo.cigarettesInPack.rawValue : cigarettesInPack,
                         UserInfo.packPrice.rawValue : packPrice])
    }
    
    func addFinishSmokingDateToUserStorage(user: User, finishDate: String) {
        self.database
            .collection(FirestoreCollection.users.rawValue)
            .document(user.uid)
            .updateData([UserInfo.finishSmokingDate.rawValue : finishDate])
    }
    
    func signIn(_ vc: AuthViewControllerProtocol, email: String, password: String) {
        Auth.auth().signIn(withEmail: email, password: password) { (authResult, error) in
            if let error = error as NSError? {
                switch AuthErrorCode(rawValue: error.code) {
                case .operationNotAllowed:
                    // Error: Indicates that email and password accounts are not enabled. Enable them in the Auth section of the Firebase console.
                    print("üê£ [DEBUG] AuthErrorCode: .operationNotAllowed")
                    vc.showSignUpErrorAlert(with: "–í—Ö–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω...\n –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º - –º—ã –Ω–∞—à–∞–º–∞–Ω–∏–º!")
                case .userDisabled:
                    // Error: The user account has been disabled by an administrator.
                    print("üê£ [DEBUG] AuthErrorCode: .userDisabled")
                    vc.showSignUpErrorAlert(with: "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–±—è –ø–ª–æ—Ö–æ –≤–µ–ª - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –µ–º—É –≤—ã–ø–∏—Å–∞–ª –±–∞–Ω\n –¢–∞–∫–æ–≤–∞ –≤–æ—Ç –∂–∏–∑–Ω—å")
                case .wrongPassword:
                    // Error: The password is invalid or the user does not have a password.
                    print("üê£ [DEBUG] AuthErrorCode: .wrongPassword")
                    vc.showSignUpErrorAlert(with: "–ü–∞—Ä–æ–ª—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!\n –°–¥–µ–ª–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º\n –ù—É –∏–ª–∏ –Ω–µ –¥–µ–ª–∞–π—Ç–µ")
                case .invalidEmail:
                    // Error: Indicates the email address is malformed.
                    print("üê£ [DEBUG] AuthErrorCode: .invalidEmail")
                    vc.showSignUpErrorAlert(with: "–ö–∞–∫–∞—è-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–∞—è —É –≤–∞—Å –ø–æ—á—Ç–∞ - —Ç–∞–∫–∏–µ –ø–æ—á—Ç—ã —Ç–æ–ª—å–∫–æ –Ω–∞ –ú–∞—Ä—Å–µ\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–ª—é–¥–∞–π—Ç–µ —Ñ–æ–æ—Ä–º–∞—Ç")
                default:
                    print("üê£ [DEBUG] AuthErrorCode: DEFAULT")
                    print("Error: \(error.localizedDescription)")
                    vc.showSignUpErrorAlert(with: "–°–∞–º–∏ —Ç–æ—á–Ω–æ –Ω–µ –∑–Ω–∞–µ–º, –Ω–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏–±–æ –∂–µ –æ–Ω —É–¥–∞–ª–µ–Ω")
                }
            } else {
                print("User signs in successfully")
                self.updateUserDefaultsForUser()
                (UIApplication.shared.connectedScenes.first?.delegate as? SceneDelegate)?.setRootViewController(to: .mainState)
            }
        }
    }
    
    func finishAuth() {
        (UIApplication.shared.connectedScenes.first?.delegate as? SceneDelegate)?.setRootViewController(to: .mainState)
    }
    
    func isUserLoggedIn() -> Bool {
        return Auth.auth().currentUser != nil
    }
    
    func logout(completion: @escaping () -> Void) {
        do {
            try Auth.auth().signOut()
            print("‚ùé [DEBUG] Sign out success")
            completion()
        } catch {
            print("‚ùå [DEBUG] Sign out error")
        }
    }
    
    func updateUserDefaultsForUser() {
        guard let id = Auth.auth().currentUser?.uid else {
            print("[DEBUG] got something wrong in updating UserDefaults")
            return
        }
        currentUserID = id
        let docRef = database.collection(FirestoreCollection.users.rawValue).document(currentUserID)
        
        docRef.getDocument { (document, error) in
            
            if let document = document, document.exists {
                let dataDescription = document.data()
                guard let dataDescription = dataDescription else {
                    return
                }
                let userInfo = AppUser(data: dataDescription)
                userInfo.setUserDefaultFields()
                print("Document data: \(String(describing: dataDescription))")
                
            } else {
                print("Document does not exist")
            }
            
        }
        
        
        
        
    }
    
}

